name: "Setup balena CLI Action"
description: "Setup the balena CLI in a GitHub Actions workflow"
branding:
  icon: "code"
  color: "blue"
inputs:
  cli-version:
    description: "balena CLI version to install (example: `v18.1.9`)"
    required: false
    default: latest
  balena-token:
    description: "balenaCloud API token to login automatically"
    required: false
  skip-cache:
    description: "Skip using the tool cache and always re-download"
    required: false

# Builds and then runs as separate steps as default GitHub method does not allow passing build args
runs:
  using: "composite"
  steps:
    - name: Use latest release
      if: inputs.cli-version == 'latest' || inputs.cli-version == ''
      id: latest
      shell: bash
      working-directory: ${{ runner.temp }}
      env:
        # renovate: datasource=github-releases depName=balena-io/balena-cli
        BALENA_CLI_VERSION: v22.2.1
      run: |
        echo "release=${BALENA_CLI_VERSION}" >> "${GITHUB_OUTPUT}"

    - name: Restore tool cache
      if: inputs.skip-cache != 'true'
      id: cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: ${{ runner.tool_cache }}/balena
        key: balena-cli-${{ runner.os }}-${{ runner.arch }}-${{ steps.latest.outputs.release || inputs.cli-version }}

    - name: Get runner os
      if: steps.cache.outputs.cache-hit != true
      id: os
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        case "${{ runner.os }}" in
          Linux) echo "target=linux" >> "${GITHUB_OUTPUT}" ;;
          macOS) echo "target=macOS" >> "${GITHUB_OUTPUT}" ;;
          Windows) echo "target=windows" >> "${GITHUB_OUTPUT}" ;;
          *) echo "::error::Unsupported os: ${{ runner.os }}" ; exit 1 ;;
        esac

    - name: Get runner arch
      if: steps.cache.outputs.cache-hit != true
      id: arch
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        case "${{ runner.arch }}" in
          X64) echo "target=x64" >> "${GITHUB_OUTPUT}" ;;
          ARM64) echo "target=arm64" >> "${GITHUB_OUTPUT}" ;;
          *) echo "::error::Unsupported arch: ${{ runner.arch }}" ; exit 1 ;;
        esac

    - name: Download balena CLI
      if: steps.cache.outputs.cache-hit != true
      working-directory: ${{ runner.tool_cache }}
      shell: bash --noprofile --norc -eo pipefail -x {0}
      env:
        REPO: balena-io/balena-cli
        VERSION: ${{ steps.latest.outputs.release || inputs.cli-version }}
        OS: ${{ steps.os.outputs.target }}
        ARCH: ${{ steps.arch.outputs.target }}
      run: |
        MAJOR_VERSION=$(echo "${VERSION}" | sed 's/^v//' | cut -d. -f1)
        if [ "${MAJOR_VERSION}" -lt 22 ]; then
          curl -fsSL "http://github.com/${REPO}/releases/download/${VERSION}/balena-cli-${VERSION}-${OS}-${ARCH}-standalone.zip" -o balena-cli.zip
          unzip balena-cli.zip -d .
          rm -vrf balena-cli.zip
          mkdir -vp balena
          mv -v balena-cli balena/bin
        else
          curl -fsSL "http://github.com/${REPO}/releases/download/${VERSION}/balena-cli-${VERSION}-${OS}-${ARCH}-standalone.tar.gz" | tar -xzf -
        fi

    - name: Update PATH
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        echo "${RUNNER_TOOL_CACHE}/balena/bin" >>"${GITHUB_PATH}"

    - name: Print balena CLI version
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        balena version

    - name: Login to balenaCloud
      if: inputs.balena-token != ''
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        balena login --token "${{ inputs.balena-token }}"
        balena whoami
