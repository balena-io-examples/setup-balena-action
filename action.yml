name: "Setup balena CLI Action"
description: "Setup the balena CLI in a GitHub Actions workflow"
branding:
  icon: "code"
  color: "blue"
inputs:
  cli-version:
    description: "balena CLI version to install (example: `v18.1.9`)"
    required: false
    default: latest
  balena-token:
    description: "balenaCloud API token to login automatically"
    required: false
  skip-cache:
    description: "Skip using the tool cache and always re-download"
    required: false

# Builds and then runs as separate steps as default GitHub method does not allow passing build args
runs:
  using: "composite"
  steps:
    - name: Get latest release
      if: inputs.cli-version == 'latest' || inputs.cli-version == ''
      id: latest
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        release="$(curl -s https://api.github.com/repos/balena-io/balena-cli/releases/latest | jq -r '.tag_name')"
        echo "release=${release}" >> "${GITHUB_OUTPUT}"

    - name: Restore balena CLI cache
      if: inputs.skip-cache != 'true'
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{ runner.tool_cache }}/balena-cli
        key: balena-cli-${{ runner.os }}-${{ runner.arch }}-${{ steps.latest.outputs.release || inputs.cli-version }}

    - name: Download balena CLI (Linux X64)
      if: runner.os == 'Linux' && ! steps.cache.outputs.cache-hit
      working-directory: ${{ runner.temp }}
      shell: bash --noprofile --norc -eo pipefail -x {0}
      env:
        REPO: https://github.com/balena-io/balena-cli
        VERSION: ${{ steps.latest.outputs.release || inputs.cli-version }}
        ARCH: ${{ runner.arch }}
        OS: linux
      run: |
        curl -fsSL "${REPO}/releases/download/${VERSION}/balena-cli-${VERSION}-${OS}-${ARCH,,}-standalone.zip" -o balena-cli.zip
        unzip balena-cli.zip -d .

    - name: Download balena CLI (Windows X64)
      if: runner.os == 'Windows' && ! steps.cache.outputs.cache-hit
      working-directory: ${{ runner.temp }}
      shell: bash --noprofile --norc -eo pipefail -x {0}
      env:
        REPO: https://github.com/balena-io/balena-cli
        VERSION: ${{ steps.latest.outputs.release || inputs.cli-version }}
        ARCH: ${{ runner.arch }}
        OS: windows
      run: |
        curl -fsSL "${REPO}/releases/download/${VERSION}/balena-cli-${VERSION}-${OS}-${ARCH,,}-standalone.zip" -o balena-cli.zip
        unzip balena-cli.zip -d .

    - name: Download balena CLI (macOS)
      if: runner.os == 'macOS' && ! steps.cache.outputs.cache-hit
      working-directory: ${{ runner.temp }}
      shell: bash --noprofile --norc -eo pipefail -x {0}
      env:
        REPO: https://github.com/balena-io/balena-cli
        VERSION: ${{ steps.latest.outputs.release || inputs.cli-version }}
        ARCH: ${{ runner.arch }}
        OS: macOS
      run: |
        curl -fsSL "${REPO}/releases/download/${VERSION}/balena-cli-${VERSION}-${OS}-${ARCH,,}-standalone.zip" -o balena-cli.zip
        unzip balena-cli.zip -d .

    - name: Install balena CLI to tool cache
      uses: AnimMouse/tool-cache@v1
      with:
        folder_name: balena-cli
        cache_hit: ${{ steps.cache.outputs.cache-hit }}

    - name: Print balena CLI version
      shell: bash
      working-directory: ${{ runner.temp }}
      run: balena version

    - name: Login to balenaCloud
      if: inputs.balena-token != ''
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        balena login --token "${{ inputs.balena-token }}"
        balena whoami
